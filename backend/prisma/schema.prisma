// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  email    String @unique
  password String
  role     Role   @default(USER)
  sales Sale[]
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  code          String @unique
  weight_gold   Float
  weight_silver Float
  weight_copper Float
  price_gold    Float
  price_copper  Float
  price_silver  Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  saleItems SaleItem[]
  stock     Stock?
}

model Sale {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  totalBeforeDiscount Float
  globalDiscount      Float    @default(0)
  totalAfterDiscount  Float
  clientName          String?
  clientPhone         String?
  createdById Int?
  createdBy   User?    @relation(fields: [createdById], references: [id])

  saleItems SaleItem[]
}

model SaleItem {
  id                 Int    @id @default(autoincrement())
  quantity           Int
  unitPrice          Float // row.price from frontend
  discountPercentage Float  @default(0) // row.discount
  material           String // "gold" | "silver" | "copper"

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  saleId Int
  sale   Sale @relation(fields: [saleId], references: [id])
}

model Stock {
  id              Int @id @default(autoincrement())
  quantity_gold   Int
  quantity_silver Int
  quantity_copper Int

  productId Int     @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id        Int      @id @default(autoincrement())
  amount    Float
  title    String
  description String?
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}